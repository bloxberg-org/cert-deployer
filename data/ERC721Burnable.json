{
  "contractName": "ERC721Burnable",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.6.4+commit.1dca32f3\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC721 Token that can be irreversibly burned (destroyed).\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.\",\"params\":{\"to\":\"address to be approved for the given token ID\",\"tokenId\":\"uint256 ID of the token to be approved\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"owner\":\"address to query the balance of\"},\"returns\":{\"_0\":\"uint256 representing the amount owned by the passed address\"}},\"burn(uint256)\":{\"details\":\"Burns a specific ERC721 token.\",\"params\":{\"tokenId\":\"uint256 id of the ERC721 token to be burned.\"}},\"getApproved(uint256)\":{\"details\":\"Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the approval of\"},\"returns\":{\"_0\":\"address currently approved for the given token ID\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Tells whether an operator is approved by a given owner.\",\"params\":{\"operator\":\"operator address which you want to query the approval of\",\"owner\":\"owner address which you want to query the approval of\"},\"returns\":{\"_0\":\"bool whether the given operator is approved by the given owner\"}},\"ownerOf(uint256)\":{\"details\":\"Gets the owner of the specified token ID.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the owner of\"},\"returns\":{\"_0\":\"address currently marked as the owner of the given token ID\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the _msgSender() to be the owner, approved, or operator\",\"params\":{\"_data\":\"bytes data to send along with a safe transfer check\",\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf.\",\"params\":{\"approved\":\"representing the status of the approval to be set\",\"operator\":\"operator address to set the approval\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers the ownership of a given token ID to another address. Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requires the msg.sender to be the owner, approved, or operator.\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}}},\"title\":\"ERC721 Burnable Token\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/home/james/bloxberg-certs/cert-deployer/contracts/ERC721Burnable.sol\":\"ERC721Burnable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/james/bloxberg-certs/cert-deployer/contracts/Address.sol\":{\"keccak256\":\"0x8e5e5ba56ec398e1f5dd1b3c92b604f5d7509adedd67cb64ec99b6032603aaf1\",\"urls\":[\"bzz-raw://dedc4142af588d22fce563a0c94b11d2ef72e8960488175d1e285dfead8866eb\",\"dweb:/ipfs/Qmbaka9k33fbw1iirt4aYZtJvmFUjq23feuwreTEG7djqU\"]},\"/home/james/bloxberg-certs/cert-deployer/contracts/Context.sol\":{\"keccak256\":\"0x0de74dfa6b37943c1b834cbd8fb7a8d052e5ff80c7adb33692102dd6cd2985e9\",\"urls\":[\"bzz-raw://9d2d827fcf4a838f5821732c0acd6a40d21c2a5a2cfe2563feec91465f47bb60\",\"dweb:/ipfs/Qmex3wMKf5Sghbfvr288RUg1kP2uAyTMf11w83WbMbpQQc\"]},\"/home/james/bloxberg-certs/cert-deployer/contracts/Counters.sol\":{\"keccak256\":\"0xc734de7fec3190f8366c4fea869e0219c539f3289fdcd1398327658e6ba15c14\",\"urls\":[\"bzz-raw://a4fa8ead36e63fd868ec80a2e9af0aa3be06e99117474c6790a3c916ae2f6197\",\"dweb:/ipfs/Qmex5NCqwUtFogfKMvKcRobkW6zxi7m3hJmsXbtUR3WdZC\"]},\"/home/james/bloxberg-certs/cert-deployer/contracts/ERC165.sol\":{\"keccak256\":\"0xdcbcec72a08dc49e64965d2587b74d8b88cee6bdeecd6337016b7da774478c36\",\"urls\":[\"bzz-raw://b560b4b9736acd02b7cde1925ce1374a4bc87de0d04ba944b0a7f4056b75383f\",\"dweb:/ipfs/QmWewRjMTXUgAHTRMWZ3DHRdYdUkKWjFT7C6kNjLh4T2wL\"]},\"/home/james/bloxberg-certs/cert-deployer/contracts/ERC721.sol\":{\"keccak256\":\"0x9209db98ad0c4dd75dadc53e47da529ab3bb8bfa1e8d63ea0f919dda5f37abb4\",\"urls\":[\"bzz-raw://2b7f7cbc0340906c0a864d8448ed88b3f22db7930a668d454495b9d0e9e647bf\",\"dweb:/ipfs/QmRw9MFGQLvMCKR2yDbhN4oxdm89DsiE8EHMk3TPNdzjbb\"]},\"/home/james/bloxberg-certs/cert-deployer/contracts/ERC721Burnable.sol\":{\"keccak256\":\"0x85d4e1d73694a4bcd4f9acd42f406c49dfa73598bb2ed8f725b870bf25800812\",\"urls\":[\"bzz-raw://cfa023d69bac02a0055c8c219715d5332e9d38e7200a9ce1ce32dc0235ff3b9e\",\"dweb:/ipfs/QmcqYpDceyUtpg762FbAjVkdhn4MpHBUfP1np6qDr1NX6H\"]},\"/home/james/bloxberg-certs/cert-deployer/contracts/IERC165.sol\":{\"keccak256\":\"0x9175561c374ec1fc33045e5dfdde2057e63e00debf432875f9e1e3395d99c149\",\"urls\":[\"bzz-raw://b0167043c1938b56904deaa481a73041aa4a9e054c60db0b0dfbebfe7869c06a\",\"dweb:/ipfs/QmUoYjhymBr6WUpExKgRvKxXD5fcdpQEe1o9ResKZu6CC5\"]},\"/home/james/bloxberg-certs/cert-deployer/contracts/IERC721.sol\":{\"keccak256\":\"0x5da1615f7991814677d252ad9faec8ae4b092c11b35f4e83d912e7b20f496cc1\",\"urls\":[\"bzz-raw://569c64d0190bdd0b917c3a90df7cca0a37284eb1796f93124dbf167efe0eda1a\",\"dweb:/ipfs/Qmczfreat78GKytQuqA2zTPZJw32zxPqLCrgVqis58QdFE\"]},\"/home/james/bloxberg-certs/cert-deployer/contracts/IERC721Receiver.sol\":{\"keccak256\":\"0x0c25ff00a747f1df6cb5e5c103adb98334df7e9561b0d46079454131c139bff9\",\"urls\":[\"bzz-raw://9417ce94829309329fa0f0dc50089696bc55f9f675c4b2ffcb31f960fe706250\",\"dweb:/ipfs/QmdckiAmnW2uhXK2V2enu7bEbqiMR6hzMD1ytGH43pKLhE\"]},\"/home/james/bloxberg-certs/cert-deployer/contracts/SafeMath.sol\":{\"keccak256\":\"0x5f08a38ab68791c5a562abba20664ad358f06237bcd0cc20cd29803ebd40305b\",\"urls\":[\"bzz-raw://3eba1fc69db20574ae32cbbd6c2d1aa5a790b2b98b6749efc4b1612d2899ac26\",\"dweb:/ipfs/QmPgNqb6R7D1KD7HHk1UU15nUwuZwu2JRMCQjBXTqspcJb\"]}},\"version\":1}",
  "bytecode": "0x608060405261001d6301ffc9a760e01b6001600160e01b0361003b16565b6100366380ac58cd60e01b6001600160e01b0361003b16565b6100bf565b6001600160e01b0319808216141561009a576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b6110c5806100ce6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806342966c681161007157806342966c68146101bc5780636352211e146101d957806370a08231146101f6578063a22cb4651461022e578063b88d4fde1461025c578063e985e9c514610322576100a9565b806301ffc9a7146100ae578063081812fc146100e9578063095ea7b31461012257806323b872dd1461015057806342842e0e14610186575b600080fd5b6100d5600480360360208110156100c457600080fd5b50356001600160e01b031916610350565b604080519115158252519081900360200190f35b610106600480360360208110156100ff57600080fd5b503561036f565b604080516001600160a01b039092168252519081900360200190f35b61014e6004803603604081101561013857600080fd5b506001600160a01b0381351690602001356103d1565b005b61014e6004803603606081101561016657600080fd5b506001600160a01b038135811691602081013590911690604001356104ac565b61014e6004803603606081101561019c57600080fd5b506001600160a01b03813581169160208101359091169060400135610503565b61014e600480360360208110156101d257600080fd5b503561051e565b610106600480360360208110156101ef57600080fd5b5035610570565b61021c6004803603602081101561020c57600080fd5b50356001600160a01b03166105ca565b60408051918252519081900360200190f35b61014e6004803603604081101561024457600080fd5b506001600160a01b0381351690602001351515610632565b61014e6004803603608081101561027257600080fd5b6001600160a01b038235811692602081013590911691604082013591908101906080810160608201356401000000008111156102ad57600080fd5b8201836020820111156102bf57600080fd5b803590602001918460018302840111640100000000831117156102e157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610737945050505050565b6100d56004803603604081101561033857600080fd5b506001600160a01b0381358116916020013516610795565b6001600160e01b03191660009081526020819052604090205460ff1690565b600061037a826107c3565b6103b55760405162461bcd60e51b815260040180806020018281038252602c815260200180610fb9602c913960400191505060405180910390fd5b506000908152600260205260409020546001600160a01b031690565b60006103dc82610570565b9050806001600160a01b0316836001600160a01b0316141561042f5760405162461bcd60e51b815260040180806020018281038252602181526020018061100e6021913960400191505060405180910390fd5b806001600160a01b03166104416107e0565b6001600160a01b0316148061046257506104628161045d6107e0565b610795565b61049d5760405162461bcd60e51b8152600401808060200182810382526038815260200180610f2e6038913960400191505060405180910390fd5b6104a783836107e4565b505050565b6104bd6104b76107e0565b82610852565b6104f85760405162461bcd60e51b815260040180806020018281038252603181526020018061102f6031913960400191505060405180910390fd5b6104a78383836108f6565b6104a783838360405180602001604052806000815250610737565b6105296104b76107e0565b6105645760405162461bcd60e51b81526004018080602001828103825260308152602001806110606030913960400191505060405180910390fd5b61056d81610a47565b50565b6000818152600160205260408120546001600160a01b0316806105c45760405162461bcd60e51b8152600401808060200182810382526029815260200180610f906029913960400191505060405180910390fd5b92915050565b60006001600160a01b0382166106115760405162461bcd60e51b815260040180806020018281038252602a815260200180610f66602a913960400191505060405180910390fd5b6001600160a01b03821660009081526003602052604090206105c490610ae1565b61063a6107e0565b6001600160a01b0316826001600160a01b031614156106a0576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b80600460006106ad6107e0565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff1916921515929092179091556106f16107e0565b60408051841515815290516001600160a01b0392909216917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319181900360200190a35050565b6107486107426107e0565b83610852565b6107835760405162461bcd60e51b815260040180806020018281038252603181526020018061102f6031913960400191505060405180910390fd5b61078f84848484610ae5565b50505050565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205460ff1690565b6000908152600160205260409020546001600160a01b0316151590565b3390565b600081815260026020526040902080546001600160a01b0319166001600160a01b038416908117909155819061081982610570565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061085d826107c3565b6108985760405162461bcd60e51b815260040180806020018281038252602c815260200180610f02602c913960400191505060405180910390fd5b60006108a383610570565b9050806001600160a01b0316846001600160a01b031614806108de5750836001600160a01b03166108d38461036f565b6001600160a01b0316145b806108ee57506108ee8185610795565b949350505050565b826001600160a01b031661090982610570565b6001600160a01b03161461094e5760405162461bcd60e51b8152600401808060200182810382526029815260200180610fe56029913960400191505060405180910390fd5b6001600160a01b0382166109935760405162461bcd60e51b8152600401808060200182810382526024815260200180610ede6024913960400191505060405180910390fd5b61099e8383836104a7565b6109a96000826107e4565b6001600160a01b03831660009081526003602052604090206109ca90610b37565b6001600160a01b03821660009081526003602052604090206109eb90610b4e565b60008181526001602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000610a5282610570565b9050610a60816000846104a7565b610a6b6000836107e4565b6001600160a01b0381166000908152600360205260409020610a8c90610b37565b60008281526001602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b5490565b610af08484846108f6565b610afc84848484610b57565b61078f5760405162461bcd60e51b8152600401808060200182810382526032815260200180610eac6032913960400191505060405180910390fd5b8054610b4a90600163ffffffff610d9216565b9055565b80546001019055565b6000610b6b846001600160a01b0316610ddb565b610b77575060016108ee565b600060606001600160a01b038616630a85bd0160e11b610b956107e0565b89888860405160240180856001600160a01b03166001600160a01b03168152602001846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610c0e578181015183820152602001610bf6565b50505050905090810190601f168015610c3b5780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909a16999099178952518151919890975087965094509250829150849050835b60208310610ca35780518252601f199092019160209182019101610c84565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610d05576040519150601f19603f3d011682016040523d82523d6000602084013e610d0a565b606091505b509150915081610d5b57805115610d245780518082602001fd5b60405162461bcd60e51b8152600401808060200182810382526032815260200180610eac6032913960400191505060405180910390fd5b6000818060200190516020811015610d7257600080fd5b50516001600160e01b031916630a85bd0160e11b1493506108ee92505050565b6000610dd483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610e14565b9392505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906108ee575050151592915050565b60008184841115610ea35760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610e68578181015183820152602001610e50565b50505050905090810190601f168015610e955780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665644552433732314275726e61626c653a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a2646970667358221220443809d1cb38800b87c9caf61189e036b91f457fc94ccb40829bce8cbc721b2064736f6c63430006040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c806342966c681161007157806342966c68146101bc5780636352211e146101d957806370a08231146101f6578063a22cb4651461022e578063b88d4fde1461025c578063e985e9c514610322576100a9565b806301ffc9a7146100ae578063081812fc146100e9578063095ea7b31461012257806323b872dd1461015057806342842e0e14610186575b600080fd5b6100d5600480360360208110156100c457600080fd5b50356001600160e01b031916610350565b604080519115158252519081900360200190f35b610106600480360360208110156100ff57600080fd5b503561036f565b604080516001600160a01b039092168252519081900360200190f35b61014e6004803603604081101561013857600080fd5b506001600160a01b0381351690602001356103d1565b005b61014e6004803603606081101561016657600080fd5b506001600160a01b038135811691602081013590911690604001356104ac565b61014e6004803603606081101561019c57600080fd5b506001600160a01b03813581169160208101359091169060400135610503565b61014e600480360360208110156101d257600080fd5b503561051e565b610106600480360360208110156101ef57600080fd5b5035610570565b61021c6004803603602081101561020c57600080fd5b50356001600160a01b03166105ca565b60408051918252519081900360200190f35b61014e6004803603604081101561024457600080fd5b506001600160a01b0381351690602001351515610632565b61014e6004803603608081101561027257600080fd5b6001600160a01b038235811692602081013590911691604082013591908101906080810160608201356401000000008111156102ad57600080fd5b8201836020820111156102bf57600080fd5b803590602001918460018302840111640100000000831117156102e157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610737945050505050565b6100d56004803603604081101561033857600080fd5b506001600160a01b0381358116916020013516610795565b6001600160e01b03191660009081526020819052604090205460ff1690565b600061037a826107c3565b6103b55760405162461bcd60e51b815260040180806020018281038252602c815260200180610fb9602c913960400191505060405180910390fd5b506000908152600260205260409020546001600160a01b031690565b60006103dc82610570565b9050806001600160a01b0316836001600160a01b0316141561042f5760405162461bcd60e51b815260040180806020018281038252602181526020018061100e6021913960400191505060405180910390fd5b806001600160a01b03166104416107e0565b6001600160a01b0316148061046257506104628161045d6107e0565b610795565b61049d5760405162461bcd60e51b8152600401808060200182810382526038815260200180610f2e6038913960400191505060405180910390fd5b6104a783836107e4565b505050565b6104bd6104b76107e0565b82610852565b6104f85760405162461bcd60e51b815260040180806020018281038252603181526020018061102f6031913960400191505060405180910390fd5b6104a78383836108f6565b6104a783838360405180602001604052806000815250610737565b6105296104b76107e0565b6105645760405162461bcd60e51b81526004018080602001828103825260308152602001806110606030913960400191505060405180910390fd5b61056d81610a47565b50565b6000818152600160205260408120546001600160a01b0316806105c45760405162461bcd60e51b8152600401808060200182810382526029815260200180610f906029913960400191505060405180910390fd5b92915050565b60006001600160a01b0382166106115760405162461bcd60e51b815260040180806020018281038252602a815260200180610f66602a913960400191505060405180910390fd5b6001600160a01b03821660009081526003602052604090206105c490610ae1565b61063a6107e0565b6001600160a01b0316826001600160a01b031614156106a0576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b80600460006106ad6107e0565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff1916921515929092179091556106f16107e0565b60408051841515815290516001600160a01b0392909216917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319181900360200190a35050565b6107486107426107e0565b83610852565b6107835760405162461bcd60e51b815260040180806020018281038252603181526020018061102f6031913960400191505060405180910390fd5b61078f84848484610ae5565b50505050565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205460ff1690565b6000908152600160205260409020546001600160a01b0316151590565b3390565b600081815260026020526040902080546001600160a01b0319166001600160a01b038416908117909155819061081982610570565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061085d826107c3565b6108985760405162461bcd60e51b815260040180806020018281038252602c815260200180610f02602c913960400191505060405180910390fd5b60006108a383610570565b9050806001600160a01b0316846001600160a01b031614806108de5750836001600160a01b03166108d38461036f565b6001600160a01b0316145b806108ee57506108ee8185610795565b949350505050565b826001600160a01b031661090982610570565b6001600160a01b03161461094e5760405162461bcd60e51b8152600401808060200182810382526029815260200180610fe56029913960400191505060405180910390fd5b6001600160a01b0382166109935760405162461bcd60e51b8152600401808060200182810382526024815260200180610ede6024913960400191505060405180910390fd5b61099e8383836104a7565b6109a96000826107e4565b6001600160a01b03831660009081526003602052604090206109ca90610b37565b6001600160a01b03821660009081526003602052604090206109eb90610b4e565b60008181526001602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000610a5282610570565b9050610a60816000846104a7565b610a6b6000836107e4565b6001600160a01b0381166000908152600360205260409020610a8c90610b37565b60008281526001602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b5490565b610af08484846108f6565b610afc84848484610b57565b61078f5760405162461bcd60e51b8152600401808060200182810382526032815260200180610eac6032913960400191505060405180910390fd5b8054610b4a90600163ffffffff610d9216565b9055565b80546001019055565b6000610b6b846001600160a01b0316610ddb565b610b77575060016108ee565b600060606001600160a01b038616630a85bd0160e11b610b956107e0565b89888860405160240180856001600160a01b03166001600160a01b03168152602001846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610c0e578181015183820152602001610bf6565b50505050905090810190601f168015610c3b5780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909a16999099178952518151919890975087965094509250829150849050835b60208310610ca35780518252601f199092019160209182019101610c84565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610d05576040519150601f19603f3d011682016040523d82523d6000602084013e610d0a565b606091505b509150915081610d5b57805115610d245780518082602001fd5b60405162461bcd60e51b8152600401808060200182810382526032815260200180610eac6032913960400191505060405180910390fd5b6000818060200190516020811015610d7257600080fd5b50516001600160e01b031916630a85bd0160e11b1493506108ee92505050565b6000610dd483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610e14565b9392505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906108ee575050151592915050565b60008184841115610ea35760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610e68578181015183820152602001610e50565b50505050905090810190601f168015610e955780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665644552433732314275726e61626c653a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a2646970667358221220443809d1cb38800b87c9caf61189e036b91f457fc94ccb40829bce8cbc721b2064736f6c63430006040033",
  "sourceMap": "179:418:6:-:0;;;718:40:4;-1:-1:-1;;;;;;;;718:18:4;:40;:::i;:::-;2206::5;-1:-1:-1;;;;;;;;2206:18:5;:40;:::i;:::-;179:418:6;;1451:198:4;-1:-1:-1;;;;;;1534:25:4;;;;;1526:66;;;;;-1:-1:-1;;;1526:66:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1602:33:4;:20;:33;;;;;;;;;;:40;;-1:-1:-1;;1602:40:4;1638:4;1602:40;;;1451:198::o;179:418:6:-;;;;;;;",
  "deployedSourceMap": "179:418:6:-:0;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;179:418:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;9;2:12;915:142:4;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;915:142:4;-1:-1:-1;;;;;;915:142:4;;:::i;:::-;;;;;;;;;;;;;;;;;;4211:209:5;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;4211:209:5;;:::i;:::-;;;;-1:-1:-1;;;;;4211:209:5;;;;;;;;;;;;;;3545:381;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;;;;;;3545:381:5;;;;;;;;:::i;:::-;;5922:304;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;;;;;;5922:304:5;;;;;;;;;;;;;;;;;:::i;6875:149::-;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;;;;;;6875:149:5;;;;;;;;;;;;;;;;;:::i;354:241:6:-;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;354:241:6;;:::i;2892:232:5:-;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;2892:232:5;;:::i;2457:216::-;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;2457:216:5;-1:-1:-1;;;;;2457:216:5;;:::i;:::-;;;;;;;;;;;;;;;;4719:290;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;;;;;;4719:290:5;;;;;;;;;;:::i;7747:286::-;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;-1:-1;;;;;7747:286:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:11:-1;11:28;;8:2;;;52:1;49;42:12;8:2;7747:286:5;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;7747:286:5;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;7747:286:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;7747:286:5;;-1:-1:-1;7747:286:5;;-1:-1:-1;;;;;7747:286:5:i;5331:154::-;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;;;;;;5331:154:5;;;;;;;;;;:::i;915:142:4:-;-1:-1:-1;;;;;;1017:33:4;994:4;1017:33;;;;;;;;;;;;;;915:142::o;4211:209:5:-;4279:7;4306:16;4314:7;4306;:16::i;:::-;4298:73;;;;-1:-1:-1;;;4298:73:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4389:24:5;;;;:15;:24;;;;;;-1:-1:-1;;;;;4389:24:5;;4211:209::o;3545:381::-;3625:13;3641:16;3649:7;3641;:16::i;:::-;3625:32;;3681:5;-1:-1:-1;;;;;3675:11:5;:2;-1:-1:-1;;;;;3675:11:5;;;3667:57;;;;-1:-1:-1;;;3667:57:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3759:5;-1:-1:-1;;;;;3743:21:5;:12;:10;:12::i;:::-;-1:-1:-1;;;;;3743:21:5;;:62;;;;3768:37;3785:5;3792:12;:10;:12::i;:::-;3768:16;:37::i;:::-;3735:152;;;;-1:-1:-1;;;3735:152:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3898:21;3907:2;3911:7;3898:8;:21::i;:::-;3545:381;;;:::o;5922:304::-;6081:41;6100:12;:10;:12::i;:::-;6114:7;6081:18;:41::i;:::-;6073:103;;;;-1:-1:-1;;;6073:103:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6187:32;6201:4;6207:2;6211:7;6187:13;:32::i;6875:149::-;6978:39;6995:4;7001:2;7005:7;6978:39;;;;;;;;;;;;:16;:39::i;354:241:6:-;470:41;489:12;:10;:12::i;470:41::-;462:102;;;;-1:-1:-1;;;462:102:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;574:14;580:7;574:5;:14::i;:::-;354:241;:::o;2892:232:5:-;2956:7;2991:20;;;:11;:20;;;;;;-1:-1:-1;;;;;2991:20:5;3029:19;3021:73;;;;-1:-1:-1;;;3021:73:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3112:5;2892:232;-1:-1:-1;;2892:232:5:o;2457:216::-;2521:7;-1:-1:-1;;;;;2548:19:5;;2540:74;;;;-1:-1:-1;;;2540:74:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2632:24:5;;;;;;:17;:24;;;;;:34;;:32;:34::i;4719:290::-;4833:12;:10;:12::i;:::-;-1:-1:-1;;;;;4821:24:5;:8;-1:-1:-1;;;;;4821:24:5;;;4813:62;;;;;-1:-1:-1;;;4813:62:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;4931:8;4886:18;:32;4905:12;:10;:12::i;:::-;-1:-1:-1;;;;;4886:32:5;;;;;;;;;;;;;;;;;-1:-1:-1;4886:32:5;;;:42;;;;;;;;;;;;:53;;-1:-1:-1;;4886:53:5;;;;;;;;;;;4969:12;:10;:12::i;:::-;4954:48;;;;;;;;;;-1:-1:-1;;;;;4954:48:5;;;;;;;;;;;;;;4719:290;;:::o;7747:286::-;7878:41;7897:12;:10;:12::i;:::-;7911:7;7878:18;:41::i;:::-;7870:103;;;;-1:-1:-1;;;7870:103:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7983:43;8001:4;8007:2;8011:7;8020:5;7983:17;:43::i;:::-;7747:286;;;;:::o;5331:154::-;-1:-1:-1;;;;;5443:25:5;;;5420:4;5443:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;5331:154::o;9210:152::-;9267:4;9299:20;;;:11;:20;;;;;;-1:-1:-1;;;;;9299:20:5;9336:19;;;9210:152::o;735:104:2:-;822:10;735:104;:::o;15244:155:5:-;15309:24;;;;:15;:24;;;;;:29;;-1:-1:-1;;;;;;15309:29:5;-1:-1:-1;;;;;15309:29:5;;;;;;;;:24;;15362:16;15309:24;15362:7;:16::i;:::-;-1:-1:-1;;;;;15353:39:5;;;;;;;;;;;15244:155;;:::o;9723:329::-;9808:4;9832:16;9840:7;9832;:16::i;:::-;9824:73;;;;-1:-1:-1;;;9824:73:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9907:13;9923:16;9931:7;9923;:16::i;:::-;9907:32;;9968:5;-1:-1:-1;;;;;9957:16:5;:7;-1:-1:-1;;;;;9957:16:5;;:51;;;;10001:7;-1:-1:-1;;;;;9977:31:5;:20;9989:7;9977:11;:20::i;:::-;-1:-1:-1;;;;;9977:31:5;;9957:51;:87;;;;10012:32;10029:5;10036:7;10012:16;:32::i;:::-;9949:96;9723:329;-1:-1:-1;;;;9723:329:5:o;13097:538::-;13218:4;-1:-1:-1;;;;;13198:24:5;:16;13206:7;13198;:16::i;:::-;-1:-1:-1;;;;;13198:24:5;;13190:78;;;;-1:-1:-1;;;13190:78:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;13286:16:5;;13278:65;;;;-1:-1:-1;;;13278:65:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13354:39;13375:4;13381:2;13385:7;13354:20;:39::i;:::-;13431:29;13448:1;13452:7;13431:8;:29::i;:::-;-1:-1:-1;;;;;13471:23:5;;;;;;:17;:23;;;;;:35;;:33;:35::i;:::-;-1:-1:-1;;;;;13516:21:5;;;;;;:17;:21;;;;;:33;;:31;:33::i;:::-;13560:20;;;;:11;:20;;;;;;:25;;-1:-1:-1;;;;;;13560:25:5;-1:-1:-1;;;;;13560:25:5;;;;;;;;;13601:27;;13560:20;;13601:27;;;;;;;13097:538;;;:::o;12354:366::-;12413:13;12429:16;12437:7;12429;:16::i;:::-;12413:32;;12456:48;12477:5;12492:1;12496:7;12456:20;:48::i;:::-;12542:29;12559:1;12563:7;12542:8;:29::i;:::-;-1:-1:-1;;;;;12582:24:5;;;;;;:17;:24;;;;;:36;;:34;:36::i;:::-;12659:1;12628:20;;;:11;:20;;;;;;:33;;-1:-1:-1;;;;;;12628:33:5;;;12677:36;12640:7;;12659:1;-1:-1:-1;;;;;12677:36:5;;;;;12659:1;;12677:36;12354:366;;:::o;1059:112:3:-;1150:14;;1059:112::o;8738:277:5:-;8855:32;8869:4;8875:2;8879:7;8855:13;:32::i;:::-;8905:48;8928:4;8934:2;8938:7;8947:5;8905:22;:48::i;:::-;8897:111;;;;-1:-1:-1;;;8897:111:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1361:108:3;1441:14;;:21;;1460:1;1441:21;:18;:21;:::i;:::-;1424:38;;1361:108::o;1177:178::-;1329:19;;1347:1;1329:19;;;1177:178::o;14188:1050:5:-;14308:4;14333:15;:2;-1:-1:-1;;;;;14333:13:5;;:15::i;:::-;14328:58;;-1:-1:-1;14371:4:5;14364:11;;14328:58;14455:12;14469:23;-1:-1:-1;;;;;14496:7:5;;-1:-1:-1;;;14599:12:5;:10;:12::i;:::-;14625:4;14643:7;14664:5;14504:175;;;;;;-1:-1:-1;;;;;14504:175:5;-1:-1:-1;;;;;14504:175:5;;;;;;-1:-1:-1;;;;;14504:175:5;-1:-1:-1;;;;;14504:175:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;14504:175:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;14504:175:5;;;-1:-1:-1;;26:21;;;22:32;6:49;;14504:175:5;;;49:4:-1;25:18;;61:17;;-1:-1;;;;;182:15;-1:-1;;;;;;14504:175:5;;;179:29:-1;;;;160:49;;14496:184:5;;;14504:175;;14496:184;;-1:-1:-1;14496:184:5;;-1:-1:-1;25:18;-1:-1;14496:184:5;-1:-1:-1;14496:184:5;;-1:-1:-1;14496:184:5;;-1:-1:-1;25:18;36:153;66:2;61:3;58:11;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;14496:184:5;;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;19;14:27;;;;67:4;61:11;56:16;;134:4;130:9;123:4;105:16;101:27;97:43;94:1;90:51;84:4;77:65;157:16;154:1;147:27;211:16;208:1;201:4;198:1;194:12;179:49;5:228;;14:27;32:4;27:9;;5:228;;14454:226:5;;;;14695:7;14690:542;;14722:17;;:21;14718:376;;14887:10;14881:17;14947:15;14934:10;14930:2;14926:19;14919:44;14836:145;15019:60;;-1:-1:-1;;;15019:60:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14690:542;15124:13;15151:10;15140:32;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;15140:32:5;-1:-1:-1;;;;;;15194:26:5;-1:-1:-1;;;15194:26:5;;-1:-1:-1;15186:35:5;;-1:-1:-1;;;15186:35:5;1277:134:20;1335:7;1361:43;1365:1;1368;1361:43;;;;;;;;;;;;;;;;;:3;:43::i;:::-;1354:50;1277:134;-1:-1:-1;;;1277:134:20:o;685:610:0:-;745:4;1206:20;;1051:66;1245:23;;;;;;:42;;-1:-1:-1;;1272:15:0;;;1237:51;-1:-1:-1;;685:610:0:o;1695:187:20:-;1781:7;1816:12;1808:6;;;;1800:29;;;;-1:-1:-1;;;1800:29:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1800:29:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1851:5:20;;;1695:187::o",
  "source": "pragma solidity ^0.6.0;\n\nimport \"./Context.sol\";\nimport \"./ERC721.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\n */\ncontract ERC721Burnable is Context, ERC721 {\n    /**\n     * @dev Burns a specific ERC721 token.\n     * @param tokenId uint256 id of the ERC721 token to be burned.\n     */\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721Burnable: caller is not owner nor approved\");\n        _burn(tokenId);\n    }\n}\n",
  "sourcePath": "/home/james/bloxberg-certs/cert-deployer/contracts/ERC721Burnable.sol",
  "ast": {
    "absolutePath": "/home/james/bloxberg-certs/cert-deployer/contracts/ERC721Burnable.sol",
    "exportedSymbols": {
      "ERC721Burnable": [
        1022
      ]
    },
    "id": 1023,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 994,
        "literals": [
          "solidity",
          "^",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:6"
      },
      {
        "absolutePath": "/home/james/bloxberg-certs/cert-deployer/contracts/Context.sol",
        "file": "./Context.sol",
        "id": 995,
        "nodeType": "ImportDirective",
        "scope": 1023,
        "sourceUnit": 161,
        "src": "25:23:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/james/bloxberg-certs/cert-deployer/contracts/ERC721.sol",
        "file": "./ERC721.sol",
        "id": 996,
        "nodeType": "ImportDirective",
        "scope": 1023,
        "sourceUnit": 993,
        "src": "49:22:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 998,
              "name": "Context",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 160,
              "src": "206:7:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Context_$160",
                "typeString": "contract Context"
              }
            },
            "id": 999,
            "nodeType": "InheritanceSpecifier",
            "src": "206:7:6"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1000,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 992,
              "src": "215:6:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$992",
                "typeString": "contract ERC721"
              }
            },
            "id": 1001,
            "nodeType": "InheritanceSpecifier",
            "src": "215:6:6"
          }
        ],
        "contractDependencies": [
          160,
          266,
          992,
          1746,
          1854
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 997,
          "nodeType": "StructuredDocumentation",
          "src": "73:105:6",
          "text": "@title ERC721 Burnable Token\n@dev ERC721 Token that can be irreversibly burned (destroyed)."
        },
        "fullyImplemented": true,
        "id": 1022,
        "linearizedBaseContracts": [
          1022,
          992,
          1854,
          266,
          1746,
          160
        ],
        "name": "ERC721Burnable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1020,
              "nodeType": "Block",
              "src": "400:195:6",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 1009,
                              "name": "_msgSender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 148,
                              "src": "489:10:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
                                "typeString": "function () view returns (address payable)"
                              }
                            },
                            "id": 1010,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "489:12:6",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1011,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1004,
                            "src": "503:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 1008,
                          "name": "_isApprovedOrOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 659,
                          "src": "470:18:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) view returns (bool)"
                          }
                        },
                        "id": 1012,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "470:41:6",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564",
                        "id": 1013,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "513:50:6",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ee6b7e810d7b317242d4688e6943ff4dd7897bb01d903b1a666812481b12a4f1",
                          "typeString": "literal_string \"ERC721Burnable: caller is not owner nor approved\""
                        },
                        "value": "ERC721Burnable: caller is not owner nor approved"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ee6b7e810d7b317242d4688e6943ff4dd7897bb01d903b1a666812481b12a4f1",
                          "typeString": "literal_string \"ERC721Burnable: caller is not owner nor approved\""
                        }
                      ],
                      "id": 1007,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "462:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1014,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "462:102:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1015,
                  "nodeType": "ExpressionStatement",
                  "src": "462:102:6"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1017,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1004,
                        "src": "580:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1016,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 814,
                      "src": "574:5:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 1018,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "574:14:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1019,
                  "nodeType": "ExpressionStatement",
                  "src": "574:14:6"
                }
              ]
            },
            "documentation": {
              "id": 1002,
              "nodeType": "StructuredDocumentation",
              "src": "228:121:6",
              "text": "@dev Burns a specific ERC721 token.\n@param tokenId uint256 id of the ERC721 token to be burned."
            },
            "functionSelector": "42966c68",
            "id": 1021,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1005,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1004,
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1021,
                  "src": "368:15:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1003,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "368:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "367:17:6"
            },
            "returnParameters": {
              "id": 1006,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "400:0:6"
            },
            "scope": 1022,
            "src": "354:241:6",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          }
        ],
        "scope": 1023,
        "src": "179:418:6"
      }
    ],
    "src": "0:598:6"
  },
  "legacyAST": {
    "absolutePath": "/home/james/bloxberg-certs/cert-deployer/contracts/ERC721Burnable.sol",
    "exportedSymbols": {
      "ERC721Burnable": [
        1022
      ]
    },
    "id": 1023,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 994,
        "literals": [
          "solidity",
          "^",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:6"
      },
      {
        "absolutePath": "/home/james/bloxberg-certs/cert-deployer/contracts/Context.sol",
        "file": "./Context.sol",
        "id": 995,
        "nodeType": "ImportDirective",
        "scope": 1023,
        "sourceUnit": 161,
        "src": "25:23:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/james/bloxberg-certs/cert-deployer/contracts/ERC721.sol",
        "file": "./ERC721.sol",
        "id": 996,
        "nodeType": "ImportDirective",
        "scope": 1023,
        "sourceUnit": 993,
        "src": "49:22:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 998,
              "name": "Context",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 160,
              "src": "206:7:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Context_$160",
                "typeString": "contract Context"
              }
            },
            "id": 999,
            "nodeType": "InheritanceSpecifier",
            "src": "206:7:6"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1000,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 992,
              "src": "215:6:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$992",
                "typeString": "contract ERC721"
              }
            },
            "id": 1001,
            "nodeType": "InheritanceSpecifier",
            "src": "215:6:6"
          }
        ],
        "contractDependencies": [
          160,
          266,
          992,
          1746,
          1854
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 997,
          "nodeType": "StructuredDocumentation",
          "src": "73:105:6",
          "text": "@title ERC721 Burnable Token\n@dev ERC721 Token that can be irreversibly burned (destroyed)."
        },
        "fullyImplemented": true,
        "id": 1022,
        "linearizedBaseContracts": [
          1022,
          992,
          1854,
          266,
          1746,
          160
        ],
        "name": "ERC721Burnable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1020,
              "nodeType": "Block",
              "src": "400:195:6",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 1009,
                              "name": "_msgSender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 148,
                              "src": "489:10:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
                                "typeString": "function () view returns (address payable)"
                              }
                            },
                            "id": 1010,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "489:12:6",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1011,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1004,
                            "src": "503:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 1008,
                          "name": "_isApprovedOrOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 659,
                          "src": "470:18:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) view returns (bool)"
                          }
                        },
                        "id": 1012,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "470:41:6",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564",
                        "id": 1013,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "513:50:6",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ee6b7e810d7b317242d4688e6943ff4dd7897bb01d903b1a666812481b12a4f1",
                          "typeString": "literal_string \"ERC721Burnable: caller is not owner nor approved\""
                        },
                        "value": "ERC721Burnable: caller is not owner nor approved"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ee6b7e810d7b317242d4688e6943ff4dd7897bb01d903b1a666812481b12a4f1",
                          "typeString": "literal_string \"ERC721Burnable: caller is not owner nor approved\""
                        }
                      ],
                      "id": 1007,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "462:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1014,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "462:102:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1015,
                  "nodeType": "ExpressionStatement",
                  "src": "462:102:6"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1017,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1004,
                        "src": "580:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1016,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 814,
                      "src": "574:5:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 1018,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "574:14:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1019,
                  "nodeType": "ExpressionStatement",
                  "src": "574:14:6"
                }
              ]
            },
            "documentation": {
              "id": 1002,
              "nodeType": "StructuredDocumentation",
              "src": "228:121:6",
              "text": "@dev Burns a specific ERC721 token.\n@param tokenId uint256 id of the ERC721 token to be burned."
            },
            "functionSelector": "42966c68",
            "id": 1021,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1005,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1004,
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1021,
                  "src": "368:15:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1003,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "368:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "367:17:6"
            },
            "returnParameters": {
              "id": 1006,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "400:0:6"
            },
            "scope": 1022,
            "src": "354:241:6",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          }
        ],
        "scope": 1023,
        "src": "179:418:6"
      }
    ],
    "src": "0:598:6"
  },
  "compiler": {
    "name": "solc",
    "version": "0.6.4+commit.1dca32f3.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.23",
  "updatedAt": "2020-07-06T10:34:03.445Z",
  "devdoc": {
    "details": "ERC721 Token that can be irreversibly burned (destroyed).",
    "methods": {
      "approve(address,uint256)": {
        "details": "Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.",
        "params": {
          "to": "address to be approved for the given token ID",
          "tokenId": "uint256 ID of the token to be approved"
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address.",
        "params": {
          "owner": "address to query the balance of"
        },
        "returns": {
          "_0": "uint256 representing the amount owned by the passed address"
        }
      },
      "burn(uint256)": {
        "details": "Burns a specific ERC721 token.",
        "params": {
          "tokenId": "uint256 id of the ERC721 token to be burned."
        }
      },
      "getApproved(uint256)": {
        "details": "Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.",
        "params": {
          "tokenId": "uint256 ID of the token to query the approval of"
        },
        "returns": {
          "_0": "address currently approved for the given token ID"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "Tells whether an operator is approved by a given owner.",
        "params": {
          "operator": "operator address which you want to query the approval of",
          "owner": "owner address which you want to query the approval of"
        },
        "returns": {
          "_0": "bool whether the given operator is approved by the given owner"
        }
      },
      "ownerOf(uint256)": {
        "details": "Gets the owner of the specified token ID.",
        "params": {
          "tokenId": "uint256 ID of the token to query the owner of"
        },
        "returns": {
          "_0": "address currently marked as the owner of the given token ID"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the _msgSender() to be the owner, approved, or operator",
        "params": {
          "_data": "bytes data to send along with a safe transfer check",
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf.",
        "params": {
          "approved": "representing the status of the approval to be set",
          "operator": "operator address to set the approval"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}.     * Time complexity O(1), guaranteed to always use less than 30 000 gas."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of a given token ID to another address. Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requires the msg.sender to be the owner, approved, or operator.",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      }
    },
    "title": "ERC721 Burnable Token"
  },
  "userdoc": {
    "methods": {}
  }
}